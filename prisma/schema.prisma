generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-musl", "linux-musl-openssl-3.0.x", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Inquiry {
  id      String @id @default(uuid())
  content String @db.MediumText

  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model Announcement {
  id      String @id @default(uuid())
  title   String @db.VarChar(255)
  content String @db.LongText

  createdAt DateTime @default(now())
}

model Admin {
  id String @id @default(uuid())

  adminId  String @unique @db.VarChar(255)
  password String @db.VarChar(255)
}

model ChatRoom {
  id String @id @default(uuid())

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  messages      ChatMessage[]
  userChatRooms UserChatRoom[]
}

model ChatMessage {
  id String @id @default(uuid())

  content   String   @db.MediumText
  createdAt DateTime @default(now())

  isRead Boolean @default(false)

  chatRoomId String
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model UserChatRoom {
  id String @id @default(uuid())

  order Int @default(0) @db.TinyInt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  chatRoomId String
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([userId, chatRoomId])
}

model User {
  id String @id @default(uuid())

  email          String? @db.VarChar(255)
  password       String? @db.VarChar(255)
  name           String? @db.VarChar(255)
  nickname       String? @db.VarChar(255)
  profileImageId String?
  profileImage   Image?  @relation(fields: [profileImageId], references: [id])
  phoneNumber    String? @db.Char(11)

  isAlarmAccepted Boolean @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  social         UserSocial?
  musician       Musician?
  serviceReviews ServiceReview[]
  clicks         MusicianServiceClicked[]
  inquiries      Inquiry[]
  chatMessages   ChatMessage[]
  userChatRooms  UserChatRoom[]
}

model UserSocial {
  id String @id @default(uuid())

  socialType Int    @db.TinyInt
  socialId   String @unique

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Musician {
  id String @id @default(uuid())

  // 기본 정보
  stageName    String  @db.VarChar(200)
  name         String  @db.VarChar(100)
  groupType    Int     @db.TinyInt
  introduction String? @db.MediumText
  isPending    Boolean @default(true)
  isAuthorized Boolean @default(false)

  // 계좌 정보
  bankCode             String @db.VarChar(10)
  bankAccount          String @db.VarChar(30)
  bankAccountOwnerName String @db.VarChar(20)

  // 증빙자료
  evidenceFileId String
  evidenceFile   File   @relation(fields: [evidenceFileId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  userId               String               @unique
  user                 User                 @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  // 직책
  positions            MusicianPosition[]
  // SNS 주소
  snses                MusicianSns[]
  services             MusicianService[]
  serviceReviewReplies ServiceReviewReply[]
}

model MusicianService {
  id         String   @id @default(uuid())
  musicianId String
  musician   Musician @relation(fields: [musicianId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  mixMastering MixMastering?
  recording    Recording?
  artist       Artist?
  albumArt     AlbumArt?
  mrBeat       MrBeat?

  createdAt DateTime @default(now())

  reviews ServiceReview[]
  clicks  MusicianServiceClicked[]
}

model MusicianServiceClicked {
  id                String          @id @default(uuid())
  userId            String
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  musicianServiceId String
  musicianService   MusicianService @relation(fields: [musicianServiceId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
}

model ServiceReview {
  id String @id @default(uuid())

  content String @db.MediumText
  score   Int    @db.TinyInt

  userId    String
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  serviceId String
  service   MusicianService @relation(fields: [serviceId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  replies   ServiceReviewReply[]
}

model ServiceReviewReply {
  id String @id @default(uuid())

  content String @db.MediumText

  serviceReviewId String
  serviceReview   ServiceReview @relation(fields: [serviceReviewId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  musicianId String
  musician   Musician @relation(fields: [musicianId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model MusicianPosition {
  positionId String
  position   Position @relation(fields: [positionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  musicianId String
  musician   Musician @relation(fields: [musicianId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([positionId, musicianId])
}

model Position {
  id String @id @default(uuid())

  name String @db.VarChar(100)

  musicianPositions MusicianPosition[]
}

model MusicianSns {
  snsId      String
  sns        Sns      @relation(fields: [snsId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  musicianId String
  musician   Musician @relation(fields: [musicianId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  link       String   @db.VarChar(255)

  @@id([snsId, musicianId])
}

model Sns {
  id String @id @default(uuid())

  name String @db.VarChar(100)

  MusicianSnS MusicianSns[]
}

model MrBeat {
  id String @id @default(uuid())

  name      String @db.VarChar(255)
  groupType Int    @db.TinyInt

  thumbnailId String
  thumbnail   Image  @relation(fields: [thumbnailId], references: [id])

  musicId String
  music   Music  @relation(fields: [musicId], references: [id])

  genres MrBeatGenre[]
  moods  MrBeatMood[]

  isPending     Boolean @default(true)
  isAuthorized  Boolean @default(false)
  isSaleStopped Boolean @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  contacts MrBeatContact[]
  licenses MrBeatLicense[]

  musicianService   MusicianService @relation(fields: [musicianServiceId], references: [id])
  musicianServiceId String          @unique
}

model MrBeatContact {
  mrBeatId  String
  mrBeat    MrBeat  @relation(fields: [mrBeatId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  contactId String
  contact   Contact @relation(fields: [contactId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  method String

  @@id([mrBeatId, contactId])
}

model MrBeatLicense {
  id String @id @default(uuid())

  usePeriod                    String?
  cost                         Int     @db.UnsignedMediumInt
  isNewSongWithVoiceAllowed    Boolean
  isProfitActivityAllowed      Boolean
  isPerformanceActivityAllowed Boolean
  isBackgroundMusicAllowed     Boolean
  isMVProduceAllowed           Boolean
  isShareAllowed               Boolean
  isArrangeAllowed             Boolean

  licenseId     String
  license       License                     @relation(fields: [licenseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mrBeatId      String
  mrBeat        MrBeat                      @relation(fields: [mrBeatId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  providedFiles MrBeatLicenseProvidedFile[]

  @@unique([licenseId, mrBeatId])
}

model MrBeatLicenseProvidedFile {
  id String @id @default(uuid())

  extension String

  mrBeatLicenseId String
  mrBeatLicense   MrBeatLicense @relation(fields: [mrBeatLicenseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Artist {
  id String @id @default(uuid())

  name              String  @db.VarChar(255)
  description       String  @db.LongText
  updateDescription String  @db.MediumText
  isPending         Boolean @default(true)
  isAuthorized      Boolean @default(false)
  isSaleStopped     Boolean @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  images            ArtistImage[]
  saleTypes         ArtistSaleTypeBridge[]
  contacts          ArtistContact[]
  licenses          ArtistLicense[]
  musicianService   MusicianService        @relation(fields: [musicianServiceId], references: [id])
  musicianServiceId String                 @unique
}

model ArtistLicense {
  id String @id @default(uuid())

  cost        Int @db.UnsignedMediumInt
  updateCount Int @db.TinyInt
  workPeriod  Int @db.SmallInt
  draftCount  Int @db.SmallInt

  isCopyRightTransferAllowed Boolean
  isCommercialUseAllowed     Boolean
  isOriginFileProvided       Boolean
  isApplicationAvailable     Boolean

  licenseId String
  license   License @relation(fields: [licenseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  artistId  String
  artist    Artist  @relation(fields: [artistId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  providedFiles ArtistLicenseProvidedFile[]

  @@unique([licenseId, artistId])
}

model ArtistLicenseProvidedFile {
  id String @id @default(uuid())

  extension String

  ArtistLicense   ArtistLicense @relation(fields: [artistLicenseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  artistLicenseId String
}

model ArtistContact {
  artistId  String
  artist    Artist  @relation(fields: [artistId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  contactId String
  contact   Contact @relation(fields: [contactId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  method String

  @@id([artistId, contactId])
}

model ArtistSaleTypeBridge {
  artistId   String
  artist     Artist         @relation(fields: [artistId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  saleTypeId String
  saleType   ArtistSaleType @relation(fields: [saleTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([artistId, saleTypeId])
}

model ArtistSaleType {
  id String @id @default(uuid())

  name  String
  order Int    @default(0) @db.TinyInt

  artistSaleTypes ArtistSaleTypeBridge[]
}

model ArtistImage {
  isThumbnail Boolean

  artistId String
  artist   Artist @relation(fields: [artistId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  imageId  String
  image    Image  @relation(fields: [imageId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([artistId, imageId])
}

model Recording {
  id String @id @default(uuid())

  name                String  @db.VarChar(20)
  studioName          String  @db.VarChar(20)
  isEngineerSupported Boolean
  reservationLink     String  @db.VarChar(255)
  description         String  @db.MediumText
  isPending           Boolean @default(true)
  isAuthorized        Boolean @default(false)
  isSaleStopped       Boolean @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  images RecordingImage[]

  recordingRegion   RecordingRegion    @relation(fields: [recordingRegionId], references: [id])
  recordingRegionId String
  licenses          RecordingLicense[]
  musicianService   MusicianService    @relation(fields: [musicianServiceId], references: [id])
  musicianServiceId String             @unique
}

model RecordingLicense {
  id String @id @default(uuid())

  useTime Int @db.TinyInt
  cost    Int @db.UnsignedMediumInt

  recordingId String
  recording   Recording @relation(fields: [recordingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  licenseId   String
  license     License   @relation(fields: [licenseId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([recordingId, licenseId])
}

model RecordingRegion {
  id String @id @default(uuid())

  regionLargeGroupId String
  regionLargeGroup   RegionLargeGroup  @relation(fields: [regionLargeGroupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  regionSmallGroupId String?
  regionSmallGroup   RegionSmallGroup? @relation(fields: [regionSmallGroupId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  recording Recording[]
}

model RecordingImage {
  imageId     String
  image       Image     @relation(fields: [imageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  recordingId String
  recording   Recording @relation(fields: [recordingId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  isThumbnail Boolean @default(false)

  @@id([imageId, recordingId])
}

model RegionLargeGroup {
  id String @id @default(uuid())

  name  String @db.VarChar(20)
  order Int    @default(0) @db.TinyInt

  regions          RegionSmallGroup[]
  recordingRegions RecordingRegion[]
}

model RegionSmallGroup {
  id String @id @default(uuid())

  name String @db.VarChar(20)

  largeGroupId String
  largeGroup   RegionLargeGroup @relation(fields: [largeGroupId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  recordingRegions RecordingRegion[]
}

model MixMastering {
  id String @id @default(uuid())

  name              String  @db.VarChar(20)
  description       String  @db.MediumText
  updateDescription String  @db.MediumText
  isPending         Boolean @default(true)
  isAuthorized      Boolean @default(false)
  isSaleStopped     Boolean @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  thumbnailId       String
  thumbnail         Image                 @relation(fields: [thumbnailId], references: [id])
  musics            MixMasteringMusic[]
  genres            MixMasteringGenre[]
  contacts          MixMasteringContact[]
  licenses          MixMasteringLicense[]
  musicianService   MusicianService       @relation(fields: [musicianServiceId], references: [id])
  musicianServiceId String                @unique
}

model MixMasteringLicense {
  id String @id @default(uuid())

  cost        Int @db.UnsignedMediumInt
  updateCount Int @db.TinyInt
  workPeriod  Int @db.SmallInt
  draftCount  Int @db.SmallInt

  isCopyRightTransferAllowed Boolean
  isCommercialUseAllowed     Boolean
  isOriginFileProvided       Boolean
  isApplicationAvailable     Boolean

  licenseId      String
  license        License      @relation(fields: [licenseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mixMasteringId String
  mixMastering   MixMastering @relation(fields: [mixMasteringId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([mixMasteringId, licenseId])
}

model MixMasteringContact {
  mixMasteringId String
  mixMastering   MixMastering @relation(fields: [mixMasteringId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  contactId      String
  contact        Contact      @relation(fields: [contactId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  method String

  @@id([mixMasteringId, contactId])
}

model MixMasteringGenre {
  mixMasteringId String
  mixMastering   MixMastering @relation(fields: [mixMasteringId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  genreId        String
  genre          Genre        @relation(fields: [genreId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([mixMasteringId, genreId])
}

model MixMasteringMusic {
  mixMasteringId String
  mixMastering   MixMastering @relation(fields: [mixMasteringId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  musicId        String
  music          Music        @relation(fields: [musicId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  isBefore Boolean
  isAfter  Boolean

  @@id([mixMasteringId, musicId])
}

model AlbumArt {
  id String @id @default(uuid())

  name              String  @db.VarChar(20)
  description       String  @db.MediumText
  updateDescription String  @db.MediumText
  isPending         Boolean @default(true)
  isAuthorized      Boolean @default(false)
  isSaleStopped     Boolean @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  images            AlbumArtImage[]
  saleTypes         AlbumArtSaleTypeBridge[]
  contacts          AlbumArtContact[]
  licenses          AlbumArtLicense[]
  musicianService   MusicianService          @relation(fields: [musicianServiceId], references: [id])
  musicianServiceId String                   @unique
}

model AlbumArtLicense {
  id String @id @default(uuid())

  cost        Int @db.UnsignedMediumInt
  updateCount Int @db.TinyInt
  workPeriod  Int @db.SmallInt
  draftCount  Int @db.SmallInt

  isCopyRightTransferAllowed Boolean
  isCommercialUseAllowed     Boolean
  isOriginFileProvided       Boolean
  isApplicationAvailable     Boolean

  licenseId  String
  license    License  @relation(fields: [licenseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  albumArtId String
  albumArt   AlbumArt @relation(fields: [albumArtId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([albumArtId, licenseId])
}

model AlbumArtContact {
  albumArtId String
  albumArt   AlbumArt @relation(fields: [albumArtId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  contactId  String
  contact    Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  method String

  @@id([albumArtId, contactId])
}

model AlbumArtImage {
  albumArtId String
  albumArt   AlbumArt @relation(fields: [albumArtId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  imageId    String
  image      Image    @relation(fields: [imageId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  isThumbnail Boolean @default(false)

  @@id([albumArtId, imageId])
}

model AlbumArtSaleTypeBridge {
  albumArtId String
  albumArt   AlbumArt         @relation(fields: [albumArtId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  saleTypeId String
  saleType   AlbumArtSaleType @relation(fields: [saleTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([albumArtId, saleTypeId])
}

model AlbumArtSaleType {
  id String @id @default(uuid())

  name  String
  order Int    @default(0) @db.TinyInt

  albumArtSaleTypes AlbumArtSaleTypeBridge[]
}

model Image {
  id String @id @default(uuid())

  originalName String @db.VarChar(255)
  extension    String @db.VarChar(20)

  url String @db.VarChar(255)

  mrBeatThumbnail       MrBeat[]
  artistImages          ArtistImage[]
  recordingImages       RecordingImage[]
  mixMasteringThumbnail MixMastering[]
  albumArtImages        AlbumArtImage[]
  userProfileImages     User[]
}

model Music {
  id String @id @default(uuid())

  originalName String @db.VarChar(255)
  extension    String @db.VarChar(20)
  duration     Int    @db.Int

  url String @db.VarChar(255)

  mrBeatMusics       MrBeat[]
  mixMasteringMusics MixMasteringMusic[]
}

model File {
  id String @id @default(uuid())

  originalName String @db.VarChar(255)
  extension    String @db.VarChar(20)

  url                   String     @db.VarChar(255)
  musicianEvidenceFiles Musician[]
}

model Contact {
  id String @id @default(uuid())

  name  String @db.VarChar(20)
  order Int    @default(0) @db.TinyInt

  mrBeatContacts       MrBeatContact[]
  artistContacts       ArtistContact[]
  mixMasteringContacts MixMasteringContact[]
  albumArtContacts     AlbumArtContact[]
}

model MrBeatGenre {
  mrBeatId String
  mrBeat   MrBeat @relation(fields: [mrBeatId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  genreId  String
  genre    Genre  @relation(fields: [genreId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([mrBeatId, genreId])
}

model Genre {
  id String @id @default(uuid())

  name  String @db.VarChar(20)
  order Int    @default(0) @db.TinyInt

  mixMasteringGenres MixMasteringGenre[]
  mrBeatGenres       MrBeatGenre[]
}

model MrBeatMood {
  mrBeatId String
  mrBeat   MrBeat @relation(fields: [mrBeatId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  moodId   String
  mood     Mood   @relation(fields: [moodId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([mrBeatId, moodId])
}

model Mood {
  id String @id @default(uuid())

  name  String @db.VarChar(20)
  order Int    @default(0) @db.TinyInt

  mrBeatMoods MrBeatMood[]
}

model License {
  id String @id @default(uuid())

  name  String @db.VarChar(30)
  order Int    @default(0) @db.TinyInt

  mrBeatLicenses       MrBeatLicense[]
  artistLicenses       ArtistLicense[]
  recordingLicenses    RecordingLicense[]
  mixMasteringLicenses MixMasteringLicense[]
  albumArtLicenses     AlbumArtLicense[]
}
